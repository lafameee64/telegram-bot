from urllib.parse import quote

from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
)
from telegram.error import Forbidden
from telegram.ext import (
    Application,
    CommandHandler,
    ChatJoinRequestHandler,
    ContextTypes,
    CallbackQueryHandler,
)

# --- CONFIG ---
BOT_TOKEN = "8158399936:AAGZaDsO9D-mQ-wXlOMnzR8X-us0xmNThEY"
OWNER_USERNAME = "lafameee"  # ton @ sans le @

WELCOME_TEXT = (
    "üëã Merci d‚Äôavoir rejoint le canal !\n\n"
    "Voici mes services disponibles üëá\n"
    "Clique sur la cat√©gorie puis choisis le service qui t‚Äôint√©resse.\n"
    "‚ö° Je te r√©pondrai rapidement et validerai ta demande.\n"
    "üëâ Contact direct : @lafameee"
)

# --- DONN√âES ---
# id court -> (label affich√©, {sous_service_label: message_DM})
CATEGORIES = {
    "docs": (
        "üìÑ Documents Officiels",
        {
            "Arr√™t maladie": "Bonjour, je souhaite un document : arr√™t maladie.",
            "Facture (EDF/Gaz/Internet)": "Bonjour, je souhaite une facture (EDF/Gaz/Internet).",
            "Avis d‚Äôimposition": "Bonjour, je souhaite un avis d‚Äôimposition.",
            "Taxes fonci√®res": "Bonjour, je souhaite un document : taxes fonci√®res.",
            "Certificat de scolarit√©": "Bonjour, je souhaite un certificat de scolarit√©.",
        },
    ),
    "id": (
        "üÜî Pi√®ces d‚Äôidentit√© Officielles",
        {
            "Passeport": "Bonjour, je souhaite une pi√®ce d‚Äôidentit√© : passeport.",
            "Carte nationale": "Bonjour, je souhaite une pi√®ce d‚Äôidentit√© : carte nationale.",
            "Permis de conduire": "Bonjour, je souhaite : permis de conduire.",
            "Carte Vitale": "Bonjour, je souhaite : carte vitale.",
        },
    ),
    "bank": (
        "üè¶ Ouvertures de Comptes bancaires verifi√©s",
        {
            "Revolut": "Bonjour, je souhaite une ouverture de compte Revolut.",
            "Boursorama": "Bonjour, je souhaite une ouverture de compte Boursorama.",
            "Nickel": "Bonjour, je souhaite une ouverture de compte Nickel.",
            "Binance": "Bonjour, je souhaite une ouverture de compte Binance.",
            "Kraken": "Bonjour, je souhaite une ouverture de compte Kraken.",
        },
    ),
    "fx": (
        "üí∏ √âchanges & Monnaies",
        {
            "Crypto ‚ûú Cash": "Bonjour, je souhaite un √©change : crypto vers cash.",
            "Cash ‚ûú Virement": "Bonjour, je souhaite un √©change : cash vers virement.",
            "Autres options d‚Äô√©change": "Bonjour, je souhaite un autre type d‚Äô√©change de monnaie.",
        },
    ),
    "contracts": (
        "üìë Contrats & Justificatifs",
        {
            "Contrat de travail": "Bonjour, je souhaite un contrat de travail.",
            "Contrat de bail": "Bonjour, je souhaite un contrat de bail.",
            "Fiche de paie": "Bonjour, je souhaite une fiche de paie.",
            "D√©claration de revenus": "Bonjour, je souhaite une d√©claration de revenus.",
        },
    ),
    "online": (
        "üíª Compte Airbnb verfi√©s, Leboncoin etc..",
        {
            "Airbnb": "Bonjour, je souhaite ouvrir un compte Airbnb.",
            "Leboncoin": "Bonjour, je souhaite ouvrir un compte Leboncoin.",
            "Amazon": "Bonjour, je souhaite ouvrir un compte Amazon.",
            "Booking": "Bonjour, je souhaite ouvrir un compte Booking.",
            "Vinted / Cdiscount / Nike": "Bonjour, je souhaite ouvrir un compte (Vinted / Cdiscount / Nike).",
        },
    ),
    "other": (
        "üöó Autres Services",
        {
            "Location de voiture": "Bonjour, je souhaite louer une voiture pas √† mon nom.",
            "Mutuelle": "Bonjour, je souhaite une prestation li√©e √† la mutuelle.",
            "Autre (pr√©cisez)": "Bonjour, j‚Äôai une demande sp√©cifique (autre).",
        },
    ),
    "custom": (
        "‚ùì Demande Sp√©cifique",
        {
            "D√©crire ma demande": "Bonjour, j‚Äôai une demande sp√©cifique : ‚Ä¶",
        },
    ),
}

# --- HELPERS ---

def dm_url(text: str) -> str:
    # encode tout sauf les espaces (pour un rendu propre)
    encoded = quote(text, safe=" ")
    return f"https://t.me/{OWNER_USERNAME}?text={encoded}"

def kb_main() -> InlineKeyboardMarkup:
    rows = []
    for cat_id, (label, _) in CATEGORIES.items():
        rows.append([InlineKeyboardButton(label, callback_data=f"CAT|{cat_id}")])
    return InlineKeyboardMarkup(rows)

def kb_sub(cat_id: str) -> InlineKeyboardMarkup:
    label, services = CATEGORIES[cat_id]
    rows = []
    for sub_label, message in services.items():
        rows.append([InlineKeyboardButton(f"‚û°Ô∏è {sub_label}", url=dm_url(message))])
    # Bouton ‚ÄúAutre sur demande‚Äù pr√©sent dans CHAQUE sous-menu
    rows.append([InlineKeyboardButton("üìù Autre sur demande", url=dm_url("Bonjour, j‚Äôai une demande qui n‚Äôest pas dans la liste."))])
    rows.append([InlineKeyboardButton("üîô Retour", callback_data="BACK")])
    return InlineKeyboardMarkup(rows)

# --- HANDLERS ---

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(WELCOME_TEXT, reply_markup=kb_main())

async def on_join_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        req = update.chat_join_request
        await context.bot.send_message(
            chat_id=req.from_user.id,
            text=WELCOME_TEXT,
            reply_markup=kb_main(),
        )
    except Forbidden:
        # L‚Äôutilisateur n‚Äôaccepte pas les MP ‚Äî on ignore proprement
        pass

async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data or ""
    if data.startswith("CAT|"):
        _, cat_id = data.split("|", 1)
        if cat_id in CATEGORIES:
            label, _ = CATEGORIES[cat_id]
            await query.edit_message_text(
                text=f"{WELCOME_TEXT}\n\n**{label}** ‚Äî choisis un service :",
                reply_markup=kb_sub(cat_id),
                parse_mode=None,  # pas besoin de Markdown ici
            )
    elif data == "BACK":
        await query.edit_message_text(
            text=WELCOME_TEXT,
            reply_markup=kb_main(),
        )

# --- APP ---

if __name__ == "__main__":
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(ChatJoinRequestHandler(on_join_request))
    app.add_handler(CallbackQueryHandler(on_button))

    app.run_polling()

